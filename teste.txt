from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

# Inicializa o app Flask
app = Flask(__name__)

def initialize():
    def create_tables():
        db.create_all()
initialize()
# Configuração do banco de dados (SQLite)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SECRET_KEY'] = 'mysecretkey'  # Usado para sessões
db = SQLAlchemy(app)

# Modelo do banco de dados para os usuários
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

class paciente(db.Model):
    id_pac = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(150), unique=True, nullable=False)
    idade = db.Column(db.Integer, nullable=False)
    endereco = db.Column(db.String(500), nullable=False)
    telefone = db.Column(db.String(20), nullable=False)
    email = db.Column(db.String(100), nullable=False)
    historico = db.Column(db.String(15000), nullable=False)

with app.app_context():
    db.create_all()

#rota para index.html
@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template('index.html')
#rota para registro_pac.html
@app.route('/pac', methods=['GET', 'POST'])
def pac():
    return render_template('registro_pac.html')

#rota de cadastro de pacientes 
@app.route('/registropaciente', methods=['GET', 'POST'])
def registro_paciente():
    if request.method == 'POST':
        nome = request.form['nome']
        idade = request.form['idade']
        endereco = request.form['endereco']
        telefone = request.form['telefone']
        email = request.form['email']
        historico = request.form['historico']

        novo_paciente = paciente(nome = nome, idade = idade, endereco = endereco, telefone = telefone, email = email, historico = historico)
        db.session.add(novo_paciente)
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('registro_pac.html')

#rota para a página que mostra os pacientes
@app.route('/listarpacientes')
def ver_pacientes():
    pacientes = paciente.query.all()  # Recupera todos os pacientes do banco
    return render_template('listar_pacientes.html', pacientes=pacientes)



# Rota para deletar um paciente
@app.route('/deletar_paciente', methods=['GET', 'POST'])
def delete():
    nome = request.form.get("nome")
    paciente = paciente.query.filter_by(nome=nome).first()
    db.session.delete(paciente)
    db.session.commit()
    return redirect("/listar_pacientes")

# Rota de cadastro de usuário
@app.route('/registrousuario', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='sha256')

        # Verificar se o usuário já existe
        user_exists = User.query.filter_by(username=username).first()
        if user_exists:
            flash("Usuário já existe. Tente outro nome.", 'danger')
            return redirect(url_for('register'))

        # Criar novo usuário
        new_user = User(username=username, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash("Cadastro realizado com sucesso!", 'success')
        return redirect(url_for('/'))
    return render_template('registro_pac.html')

# Rota de login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # Verificar se o usuário existe
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            session['username'] = user.username
            flash("Login bem-sucedido!", 'success')
            return redirect(url_for('home'))
        else:
            flash("Usuário ou senha incorretos.", 'danger')
            return redirect(url_for('login'))

    return render_template('index.html')

# Rota de página inicial (protegida)
@app.route('/exemplo')
def home():
    if 'user_id' not in session:
        return redirect(url_for('exemplo'))
    
    return render_template('index.html', username=session['username'])

# Rota de logout
@app.route('/logout')
def logout():
    session.pop('user_id', None)
    session.pop('username', None)
    flash("Você foi desconectado.", 'info')
    return redirect(url_for('login'))

# Inicializa o banco de dados se necessário






# Call the initialize function when the application starts
initialize()
if __name__ == '__main__':
    app.run(debug=True)
